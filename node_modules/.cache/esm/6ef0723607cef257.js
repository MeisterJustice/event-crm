let storage,multer,isLoggedIn,isEventOwner,getEvent,getCreateEvent,postEvent,showEvent,getEdit,putEvent,deleteEvent,purchaseTicket,ticketCallback,errorHandler;_07c‍.x([["default",()=>_07c‍.o]]);_07c‍.w("../cloudinary",[["storage",["storage"],function(v){storage=v}]]);_07c‍.w("multer",[["default",["multer"],function(v){multer=v}]]);_07c‍.w("../validation/index",[["isLoggedIn",["isLoggedIn"],function(v){isLoggedIn=v}],["isEventOwner",["isEventOwner"],function(v){isEventOwner=v}]]);_07c‍.w("../controllers/event",[["getEvent",["getEvent"],function(v){getEvent=v}],["getCreateEvent",["getCreateEvent"],function(v){getCreateEvent=v}],["postEvent",["postEvent"],function(v){postEvent=v}],["showEvent",["showEvent"],function(v){showEvent=v}],["getEdit",["getEdit"],function(v){getEdit=v}],["putEvent",["putEvent"],function(v){putEvent=v}],["deleteEvent",["deleteEvent"],function(v){deleteEvent=v}],["purchaseTicket",["purchaseTicket"],function(v){purchaseTicket=v}],["ticketCallback",["ticketCallback"],function(v){ticketCallback=v}]]);_07c‍.w("../middleware",[["errorHandler",["errorHandler"],function(v){errorHandler=v}]]);const express = require('express');
const router = express.Router({mergeParams: true});


const upload = multer({ storage });







router.get('/', errorHandler(getEvent));

router.get('/new', errorHandler(getCreateEvent));

router.post('/', upload.array('images', 9),  errorHandler(postEvent));

// router.get('/success', errorHandler(success));

router.get('/:id', errorHandler(showEvent));

router.get('/:id/edit', isEventOwner, errorHandler(getEdit));

router.put('/:id', isEventOwner, errorHandler(putEvent));

router.delete('/:id', errorHandler(deleteEvent));

router.post('/:id/ticket', errorHandler(purchaseTicket));

router.get('/paystack/callback', ticketCallback);

_07c‍.d(router);
