let isLoggedIn,eventOwnership,getEvent,getCreateEvent,postEvent,showEvent,getEdit,putEvent,deleteEvent,errorHandler;_51f‍.x([["default",()=>_51f‍.o]]);_51f‍.w("../validation/isLoggedIn",[["default",["isLoggedIn"],function(v){isLoggedIn=v}]]);_51f‍.w("../validation/event-ownership",[["default",["eventOwnership"],function(v){eventOwnership=v}]]);_51f‍.w("../controllers/event",[["getEvent",["getEvent"],function(v){getEvent=v}],["getCreateEvent",["getCreateEvent"],function(v){getCreateEvent=v}],["postEvent",["postEvent"],function(v){postEvent=v}],["showEvent",["showEvent"],function(v){showEvent=v}],["getEdit",["getEdit"],function(v){getEdit=v}],["putEvent",["putEvent"],function(v){putEvent=v}],["deleteEvent",["deleteEvent"],function(v){deleteEvent=v}]]);_51f‍.w("../middleware",[["errorHandler",["errorHandler"],function(v){errorHandler=v}]]);const express = require('express');
const router = express.Router({mergeParams: true});
const multer = require('multer');
const upload = multer({'dest': 'uploads/'});





router.get('/', errorHandler(getEvent));

router.get('/new', isLoggedIn, errorHandler(getCreateEvent));

router.post('/', isLoggedIn, upload.array('images', 6),  errorHandler(postEvent));

router.get('/:id', errorHandler(showEvent));

router.get('/:id/edit', eventOwnership, errorHandler(getEdit));

router.put('/:id', eventOwnership, upload.array('images', 6), errorHandler(putEvent));

router.delete('/:id', eventOwnership, errorHandler(deleteEvent));

_51f‍.d(router);
