let storage,multer,isLoggedIn,isEventOwner,getEvent,getCreateEvent,postEvent,showEvent,getEdit,putEvent,deleteEvent,errorHandler;_b92‍.x([["default",()=>_b92‍.o]]);_b92‍.w("../cloudinary",[["storage",["storage"],function(v){storage=v}]]);_b92‍.w("multer",[["default",["multer"],function(v){multer=v}]]);_b92‍.w("../validation/index",[["isLoggedIn",["isLoggedIn"],function(v){isLoggedIn=v}],["isEventOwner",["isEventOwner"],function(v){isEventOwner=v}]]);_b92‍.w("../controllers/event",[["getEvent",["getEvent"],function(v){getEvent=v}],["getCreateEvent",["getCreateEvent"],function(v){getCreateEvent=v}],["postEvent",["postEvent"],function(v){postEvent=v}],["showEvent",["showEvent"],function(v){showEvent=v}],["getEdit",["getEdit"],function(v){getEdit=v}],["putEvent",["putEvent"],function(v){putEvent=v}],["deleteEvent",["deleteEvent"],function(v){deleteEvent=v}]]);_b92‍.w("../middleware",[["errorHandler",["errorHandler"],function(v){errorHandler=v}]]);const express = require('express');
const router = express.Router({mergeParams: true});


const upload = multer({ storage });







router.get('/', errorHandler(getEvent));

router.get('/new', isLoggedIn, errorHandler(getCreateEvent));

router.post('/', isLoggedIn, upload.array('images', 9),  errorHandler(postEvent));

router.get('/:id', errorHandler(showEvent));

router.get('/:id/edit', isEventOwner, errorHandler(getEdit));

router.put('/:id', isEventOwner, errorHandler(putEvent));

router.delete('/:id', errorHandler(deleteEvent));

_b92‍.d(router);
