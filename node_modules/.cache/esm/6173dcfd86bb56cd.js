let createError,express,createServer,path,cookieParser,flash,mongoose,logger,bodyParser,methodOverride,passport,seedPosts,indexRouter,adminRouter,blogRouter,eventRouter,blogCommentRouter,eventCommentRouter;_86b‍.w("http-errors",[["default",["createError"],function(v){createError=v}]]);_86b‍.w("express",[["default",["express"],function(v){express=v}]]);_86b‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_86b‍.w("path",[["default",["path"],function(v){path=v}]]);_86b‍.w("cookie-parser",[["default",["cookieParser"],function(v){cookieParser=v}]]);_86b‍.w("connect-flash",[["default",["flash"],function(v){flash=v}]]);_86b‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_86b‍.w("morgan",[["default",["logger"],function(v){logger=v}]]);_86b‍.w("body-parser",[["default",["bodyParser"],function(v){bodyParser=v}]]);_86b‍.w("method-override",[["default",["methodOverride"],function(v){methodOverride=v}]]);_86b‍.w("passport",[["default",["passport"],function(v){passport=v}]]);_86b‍.w("./seeds",[["default",["seedPosts"],function(v){seedPosts=v}]]);_86b‍.w("./routes/",[["default",["indexRouter"],function(v){indexRouter=v}]]);_86b‍.w("./routes/admin",[["default",["adminRouter"],function(v){adminRouter=v}]]);_86b‍.w("./routes/blog",[["default",["blogRouter"],function(v){blogRouter=v}]]);_86b‍.w("./routes/event",[["default",["eventRouter"],function(v){eventRouter=v}]]);_86b‍.w("./routes/blog-comment",[["default",["blogCommentRouter"],function(v){blogCommentRouter=v}]]);_86b‍.w("./routes/event-comment",[["default",["eventCommentRouter"],function(v){eventCommentRouter=v}]]);require('dotenv').config()








 




// import routers







const app = express();
const server = createServer(app);


mongoose.connect('mongodb://localhost:27017/event-crm', {
    useNewUrlParser: true,
    useCreateIndex: true,
    useFindAndModify: false,
});

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(express.static(path.join(__dirname, '/public')));

app.use(methodOverride("_method"));

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(methodOverride('_method'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
  extended: true
}));
app.use(flash());

app.use(require("express-session")({
  secret: "Meister",
  resave: false,
  saveUninitialized: true
}));

// passpor config
app.use(passport.initialize());
app.use(passport.session());
require('./config/local-passport')(passport);
require('./config/facebook-passport')(passport);

// flash config
app.use((req, res, next) => {
  res.locals.error = req.flash("error");
  res.locals.success = req.flash("success");
  res.locals.currentUser = req.user;
  next();
});


// configure routes
app.use('/', indexRouter);
app.use("/blog", blogRouter);
app.use("/blog/:id/comments", blogCommentRouter);
app.use("/event", eventRouter);
app.use("/event/:id/comments", eventCommentRouter);
app.use("/admin", adminRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

// Set port
const port = process.env.PORT || 5000;

// Use mongoose promise library
mongoose.Promise = require('bluebird');


server.listen(port, ()=> {
  console.log(`server running on port ${port}`);
});